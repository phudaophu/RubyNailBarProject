
@inject IInvoicesService InvoicesService
@inject IInvoiceDetailsService InvoiceDetailsService
@inject IStoresService StoresService
@inject IUsersService UsersService
@inject FileUploadService FileUploadService
@inject ContainerStorage ContainerStorage
@inject IJSRuntime JSRuntime


<div class="table-responsive" style=" max-height: 450px; overflow-y: auto;">
    <table class="table table-striped table-hover">
        <thead class="table-light">
            <tr style="position:sticky; top:0; background:#f8f9fa; z-index:2;">
                <th>
                    <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Index"))">Index @GetSortIcon("Index")</button>
                </th>
                <th>
                    <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Store"))">Store @GetSortIcon("Store")</button>
                </th>
                <th>
                    <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Invoice Date"))"> Invoice Date @GetSortIcon("Invoice Date")</button>
                </th>
                <th>
                    <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Customer Name"))">Customer Name  @GetSortIcon("Customer Name")</button>
                </th>
                <th>
                    <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Phone No"))"> Phone No  @GetSortIcon("Phone No")</button>
                </th>
                <th>
                    <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Bill Total"))">Bill Total  @GetSortIcon("Bill Total")</button>
                </th>

                <th>
                </th>

                <th>
                </th>

                <th>
                </th>
            </tr>
        </thead>
        <tbody>
            @if (listInvoices != null && listInvoices.Any() && pagedListInvoices != null)
            {

                @foreach (var invoice in pagedListInvoices)
                {
                <tr class="align-middle" style="@(invoice.InvoiceId == this.selectedInvoiceId ? "background-color: #d8dbf2" : "background-color: white")">
                        <td style="cursor:pointer" @onclick="@(e => ShowInvoiceDetails(invoice))">
                            @(listInvoices.FindIndex(i => i.InvoiceId == invoice.InvoiceId) + 1)
                        </td>

                        <td style="cursor:pointer" @onclick="@(e => ShowInvoiceDetails(invoice))">
                            @invoice.Store?.Name
                        </td>

                        <td style="cursor:pointer" @onclick="@(e => ShowInvoiceDetails(invoice))">
                            @invoice.InvoiceDate?.ToString("MMM dd yyyy")
                        </td>

                        <td style="cursor:pointer" @onclick="@(e => ShowInvoiceDetails(invoice))">
                            @invoice.Customer?.Name
                        </td>

                        <td style="cursor:pointer" @onclick="@(e => ShowInvoiceDetails(invoice))">
                            @invoice.Customer?.PhoneNo
                        </td>

                        <td style="cursor:pointer" @onclick="@(e => ShowInvoiceDetails(invoice))">
                            @(invoice.ServicesAmount + invoice.TaxAmount + invoice.TipAmount)
                        </td>

                        <td>
                            <button type="button" class="btn btn-outline-secondary btn-sm px-2 py-0 text-nowrap" @onclick="(e) => HandleEditButton(invoice.InvoiceId)">Edit</button> 
                        </td>

                        <td>
                            <button type="button" class="btn btn-outline-secondary btn-sm px-2 py-0 text-nowrap" @onclick="(e) => HandleEditButton(invoice.InvoiceId)">Details</button>
                        </td>

                        <td>
                            <button type="button" class="btn btn-outline-secondary btn-sm px-2 py-0 text-nowrap" @onclick="(e) => HandleDeleteButton(invoice)">Delete</button>
                        </td>

                    </tr>
                }
            }
            else
            {
                <tr>
                    <td class="text-center text-black-50" colspan="9">
                        @statusInvoiceListView
                    </td>
                </tr>
            }

        </tbody>

    </table>
</div>


<!-- User Detail Modal -->
<div class="modal fade" id="userDetailModal" tabindex="-1" aria-labelledby="userDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="userDetailModalLabel">Invoice Detail</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (selectedInvoice != null)
                {
                    <div class="row">
                        <!-- Profile Picture -->
                        <div class="col-md-3 text-center">
                            <img src="@(string.IsNullOrWhiteSpace(selectedInvoice.Customer?.ImageUrl) ? FileUploadService.GetUserAvatarDefaultImage() : selectedInvoice.Customer.ImageUrl)"
                                 title="@($"{selectedInvoice.Customer?.Name}-avatar-image")" alt="Customer Image" class="img-thumbnail" style="max-width: 150px;" />
                        </div>

                        <!-- User Info -->
                        <div class="col-md-9">
                            <div class="d-flex justify-content-between align-items-center">
                                <h7><i class="bi bi-person">Summary</i></h7>
                                <a class="btn btn-outline-warning btn-sm text-uppercase px-2 py-0" href=@($"/invoice/{selectedInvoice.InvoiceId}/user/{selectedInvoice.Customer?.CustomerId}")>Edit</a>
                            </div>

                            <div class="row mt-1">
                                <div class="col-md-6">
                                    <div><strong>Customer Name:</strong> <a href=@($"/customer-back-from/{selectedInvoice.Customer?.CustomerId}")> @selectedInvoice.Customer?.Name</a> </div>
                                    <div><strong>PhoneNo:</strong> @selectedInvoice.Customer?.PhoneNo</div>
                                    <div><strong>Birthday:</strong> @selectedInvoice.Customer?.Birthday?.ToString("MMM dd")</div>
                                    <div><strong>Last Visit</strong> @selectedInvoice.Customer?.LastVisitDatetime?.ToString("MMM dd yyyy HH:mm:ss")</div>

                                    <div class="mt-2"><strong>Points:</strong> @selectedInvoice.Customer?.Points</div>
                                    <div>
                                        <strong>Customer Level:</strong>
                                        <span class="badge border @(selectedInvoice.Customer?.CustomerLevel?.Equals("Silver") == true ? "border-secondary text-secondary" : "")
                                                                                @(selectedInvoice.Customer?.CustomerLevel?.Equals("Gold") == true ? "border-warning text-warning" : "")
                                                                                    @(selectedInvoice.Customer?.CustomerLevel?.Equals("Platinum") == true ? "border-success text-success" : "")
                                                                                        @(selectedInvoice.Customer?.CustomerLevel?.Equals("Diamond") == true ? "border-danger text-danger" : "") ">

                                            @selectedInvoice.Customer?.CustomerLevel
                                        </span>
                                    </div>
                                    <div><strong>Description:</strong> @selectedInvoice.Customer?.Description</div>
                                    

                                </div>

                                <div class="col-md-6">
                                    <div><strong>Store:</strong> @selectedInvoice.Store?.Name</div>
                                    <div><strong>Manager:</strong> <a href=@($"/user-back-from/{selectedInvoice.Manager?.UserId}")> @selectedInvoice.Manager?.FirstName @selectedInvoice.Manager?.LastName</a> </div>
                                    <div><strong>Total Bill:</strong> @(selectedInvoice.ServicesAmount + selectedInvoice.TaxAmount + selectedInvoice.TipAmount)</div>
                                    <div><strong>Datetime:</strong> @(selectedInvoice.CreatedDatetime?.ToString("MMM dd yyyy HH:mm:ss"))</div>

                                    <div class="mt-2"><strong>Service Amount:</strong> @selectedInvoice.ServicesAmount</div>
                                    <div><strong>Tax Amount:</strong> @selectedInvoice.TaxAmount</div>
                                    <div><strong>Tip Amount:</strong> @selectedInvoice.TipAmount</div>


                                </div>
                            </div>
                        </div>
                    </div>
                    <hr />
                    <!-- Groups / Roles / Stores -->
                  

                     <div class="row" >
                        <h7><i class="bi bi-person">Included Services</i></h7>

                                <div class="table-responsive" style=" max-height: 150px; overflow-y: auto;">
                                    <table class="table table-striped table-hover">
                                        <thead class="table-light">
                                            <tr style="position:sticky; top:0; z-index:2;">
                                                <th>
                                                    <span> Index </span>
                                                </th>
                                                <th>
                                                    <span>Service</span>
                                                </th>
                                                <th>
                                                    <span>Staff</span>
                                                </th>
                                                <th>
                                                    <span>Fee</span>
                                                </th>
                                                <th>
                                                    <span>Tip</span>
                                                </th>
                                                <th>
                                                    <span>Time</span>
                                                </th>
                                                <th>
                                                    <span>Status</span>
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (selectedInvoice.InvoiceDetails != null && selectedInvoice.InvoiceDetails.Any())
                                            {

                                                @foreach (var invoiceDetail in selectedInvoice.InvoiceDetails)
                                                {
                                                    <tr class="align-middle">
                                                        <td style="cursor:pointer">
                                                            @invoiceDetail.InvoiceDetailId
                                                        </td>
                                                        <td style="cursor:pointer">
                                                            @invoiceDetail.Service?.Name
                                                        </td>
                                                        <td style="cursor:pointer">
                                                            @invoiceDetail.User?.FirstName @invoiceDetail.User?.LastName
                                                        </td>
                                                        <td style="cursor:pointer">
                                                            @invoiceDetail.ServiceFee
                                                        </td>
                                                         <td style="cursor:pointer">
                                                            @invoiceDetail.Tip
                                                        </td>
                                                        <td style="cursor:pointer">
                                                            @((invoiceDetail?.EndDatetime - invoiceDetail?.StartDatetime)?.TotalMinutes)
                                                        </td>
                                                        <td style="cursor:pointer">
                                                            @(invoiceDetail?.IsFinished)
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                            else
                                            {
                                                <tr>
                                                    <td class="text-center text-black-50" colspan="9">
                                                        No Data
                                                    </td>
                                                </tr>
                                            }

                                        </tbody>

                                    </table>
                                </div>
                     </div>
                     
                    

                }
                else
                {
                    <p class="text-muted">No user selected.</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {

    private List<InvoiceDetail>? listInvoiceDetails = new List<InvoiceDetail>();

    // selected start date and end date 

    private DateOnly? _selectedStartDateFilter;

    [Parameter]
    public DateOnly? SelectedStartDateFilter
    {
        get => _selectedStartDateFilter;
        set
        {
            if (value != _selectedStartDateFilter)
            {
                _selectedStartDateFilter = value;

            }
        }
    }

    private DateOnly? _selectedEndDateFilter;

    [Parameter]
    public DateOnly? SelectedEndDateFilter
    {
        get => _selectedEndDateFilter;
        set
        {
            if (value != _selectedEndDateFilter)
            {
                _selectedEndDateFilter = value;

            }
        }
    }

    // search and pagination data

    [Parameter]
    public string CurrentPath { get; set; } = string.Empty;

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public int CurrentPage { get; set; }

    [Parameter]
    public EventCallback<int> TotalPagesCallBack { get; set; }

    [Parameter]
    public EventCallback OnSortingCallBack { get; set; }

    [Parameter]
    public string? SeachingInvoicesData { get; set; }

    private int _selectedStoreId = 0;

    [Parameter]
    public int SelectedStoreIdFilter
    {
        get => _selectedStoreId;
        set
        {
            if (value >= 0 && value != _selectedStoreId)
            {
                _selectedStoreId = value;

            }
        }
    }

    private int previousTotalPage = -1;

    private bool isFirstRender = true;

    private string statusInvoiceListView = "Customer data is loading";

    private List<Invoice>? listInvoices = new List<Invoice>();

    private List<Invoice>? pagedListInvoices = new List<Invoice>();

    private string sortingByColumn = string.Empty;

    private Dictionary<string, int> sortStates = new()
    {
        { "Index",          0 },
        { "Store",          0 },
        { "Invoice Date",   0 },
        { "Customer Name",  0 },
        { "Phone No",       0 },
        { "Bill Total",     0 }
    };


    //  -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   - //



    private Invoice? selectedInvoice;

    private int selectedInvoiceId = 0;



    private List<Store>   listStores   = new List<Store>();

    // -     -   -   -   -   -   -   -   -   //



    protected override void OnParametersSet()
    {
        if (!isFirstRender)
        {

            this.SeachingInvoicesData = ContainerStorage.GetLastSearchedText(CurrentPath);
            if (ContainerStorage.GetOptionalData(CurrentPath).Count >= 0 && ContainerStorage.GetOptionalData(CurrentPath).Keys.Contains("SelectedStoreId"))
            {
                _selectedStoreId = ContainerStorage.GetOptionalData(CurrentPath)["SelectedStoreId"];

            }

            if (ContainerStorage.GetOptionalData(CurrentPath).Count >= 0 && ContainerStorage.GetOptionalData(CurrentPath).Keys.Contains("SelectedStartDate"))
            {
                int startDateNumber = ContainerStorage.GetOptionalData(CurrentPath)["SelectedStartDate"];
                if (startDateNumber > 0)
                {
                    _selectedStartDateFilter = DateOnly.ParseExact(startDateNumber.ToString(), "yyyyMMdd");
                }
            }

            if (ContainerStorage.GetOptionalData(CurrentPath).Count >= 0 && ContainerStorage.GetOptionalData(CurrentPath).Keys.Contains("SelectedEndDate"))
            {
                int endDateNumber = ContainerStorage.GetOptionalData(CurrentPath)["SelectedEndDate"];
                if (endDateNumber > 0)
                {
                    _selectedEndDateFilter = DateOnly.ParseExact(endDateNumber.ToString(), "yyyyMMdd");

                }
            }

            if (listInvoices is not null && listInvoices?.Count >= 0)
            {
                listInvoices = InvoicesService.GetExistInvoicesOrderByCreatedDatetimeDescService().ToList();
                statusInvoiceListView = "Data Is Loading...";
            }
            else
            {
                statusInvoiceListView = "No Invoice Found";
            }


            if (listInvoices is not null && listInvoices.Count >= 0 && !string.IsNullOrWhiteSpace(SeachingInvoicesData))
            {
                listInvoices = InvoicesService.SearchInvoicesByCustomerInfoService(SeachingInvoicesData);

                statusInvoiceListView = "Data Is Loading...";

                if (listInvoices is null || listInvoices.Count == 0)
                {
                    statusInvoiceListView = "No Invoice Found";
                }
            }

            if (listInvoices is not null && listInvoices.Count >= 0 && _selectedStoreId > 0)
            {
                listInvoices = listInvoices.Where(i => i.StoreId == _selectedStoreId).ToList();

                if (listInvoices.Count == 0)
                {
                    statusInvoiceListView = "No Invoice Found";
                }
            }

            if (listInvoices is not null && listInvoices.Count >= 0 && _selectedStartDateFilter.HasValue)
            {

                listInvoices = listInvoices.Where(i => i.InvoiceDate >= _selectedStartDateFilter).ToList();

                if (_selectedEndDateFilter.HasValue)
                {
                    listInvoices = listInvoices.Where(i => i.InvoiceDate <= _selectedEndDateFilter).ToList();

                }

                if (listInvoices.Count == 0)
                {
                    statusInvoiceListView = "No Invoice Found";
                }
            }

            this.PageSize = ContainerStorage.GetLastPageSize(CurrentPath);
            this.CurrentPage = ContainerStorage.GetLastCurrentPage(CurrentPath);
            this.selectedInvoiceId = ContainerStorage.GetLastSelectedRecordId(CurrentPath);

            UpdateInvoiceSorting(sortingByColumn);
            UpdatePagedInvoices();
            StateHasChanged();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            isFirstRender = false;

            this.SeachingInvoicesData = ContainerStorage.GetLastSearchedText(CurrentPath);

            if (ContainerStorage.GetOptionalData(CurrentPath).Count >= 0 && ContainerStorage.GetOptionalData(CurrentPath).Keys.Contains("SelectedStoreId"))
            {
                _selectedStoreId = ContainerStorage.GetOptionalData(CurrentPath)["SelectedStoreId"];

            }

            if (ContainerStorage.GetOptionalData(CurrentPath).Count >= 0 && ContainerStorage.GetOptionalData(CurrentPath).Keys.Contains("SelectedStartDate"))
            {
                int startDateNumber = ContainerStorage.GetOptionalData(CurrentPath)["SelectedStartDate"];
                if (startDateNumber > 0)
                {
                    _selectedStartDateFilter = DateOnly.ParseExact(startDateNumber.ToString(), "yyyyMMdd");

                }
            }

            if (ContainerStorage.GetOptionalData(CurrentPath).Count >= 0 && ContainerStorage.GetOptionalData(CurrentPath).Keys.Contains("SelectedEndDate"))
            {
                int endDateNumber = ContainerStorage.GetOptionalData(CurrentPath)["SelectedEndDate"];
                if (endDateNumber > 0)
                {
                    _selectedEndDateFilter = DateOnly.ParseExact(endDateNumber.ToString(), "yyyyMMdd");

                }
            }

            if (listInvoices is not null && listInvoices?.Count >= 0)
            {
                listInvoices = InvoicesService.GetExistInvoicesOrderByCreatedDatetimeDescService().ToList();
                statusInvoiceListView = "Data Is Loading...";
            }
            else
            {
                statusInvoiceListView = "No Invoice Found";
            }


            if (listInvoices is not null && listInvoices.Count >= 0 && !string.IsNullOrWhiteSpace(SeachingInvoicesData))
            {
                listInvoices = InvoicesService.SearchInvoicesByCustomerInfoService(SeachingInvoicesData);

                statusInvoiceListView = "Data Is Loading...";

                if (listInvoices is null || listInvoices.Count == 0)
                {
                    statusInvoiceListView = "No Invoice Found";
                }
            }

            if (listInvoices is not null && listInvoices.Count >= 0 && _selectedStoreId > 0)
            {
                listInvoices = listInvoices.Where(i => i.StoreId == _selectedStoreId).ToList();

                if (listInvoices.Count == 0)
                {
                    statusInvoiceListView = "No Invoice Found";
                }
            }

            if (listInvoices is not null && listInvoices.Count >= 0 && _selectedStartDateFilter.HasValue)
            {

                listInvoices = listInvoices.Where(i => i.InvoiceDate >= _selectedStartDateFilter).ToList();

                if (_selectedEndDateFilter.HasValue)
                {
                    listInvoices = listInvoices.Where(i => i.InvoiceDate <= _selectedEndDateFilter).ToList();

                }

                if (listInvoices.Count == 0)
                {
                    statusInvoiceListView = "No Invoice Found";
                }
            }



            this.PageSize = ContainerStorage.GetLastPageSize(CurrentPath);
            this.CurrentPage = ContainerStorage.GetLastCurrentPage(CurrentPath);
            this.selectedInvoiceId = ContainerStorage.GetLastSelectedRecordId(CurrentPath);

            UpdateInvoiceSorting(sortingByColumn);
            UpdatePagedInvoices();
            StateHasChanged();

        }
    }


    private void UpdateInvoiceSorting(string sortingByColumn)
    {
        switch (sortingByColumn)
        {
            case "Index":
                ApplyLogicSort(i => i.InvoiceId, sortingByColumn);
                break;
            case "Store":
                ApplyLogicSort(i => i.Store?.Name, sortingByColumn);
                break;

            case "Invoice Date":
                ApplyLogicSort(i => i.InvoiceDate , sortingByColumn);
                break;

            case "Customer Name":
                ApplyLogicSort(i => i.Customer?.Name, sortingByColumn);
                break;

            case "Phone No":
                ApplyLogicSort(i=>i.Customer?.PhoneNo,sortingByColumn);
                break;

            case "Bill Total":
                ApplyLogicSort(i => (i.ServicesAmount + i.TaxAmount + i.TipAmount), sortingByColumn);
                break;

            default:
                break;
        }
    }

    private void ApplyLogicSort<TKey>(Func<Invoice, TKey> selector, string column)
    {
        switch (this.sortStates[column])
        {
            case 0:

                if (!string.IsNullOrWhiteSpace(this.SeachingInvoicesData))
                {
                    this.listInvoices = InvoicesService.SearchInvoicesByCustomerInfoService(SeachingInvoicesData);
                }
                else
                {
                    this.listInvoices = InvoicesService.GetExistInvoicesOrderByCreatedDatetimeDescService();
                }

                break;

            case 1:
                if (listInvoices != null)
                {
                    this.listInvoices = listInvoices.OrderBy(selector).ToList();
                }
                break;

            case 2:
                if (listInvoices != null)
                {
                    this.listInvoices = listInvoices.OrderByDescending(selector).ToList();

                }
                break;
        }

    }

    public void ClearSorting()
    {
        foreach (var key in sortStates.Keys.ToList())
        {
            sortStates[key] = 0;
        }

        this.sortingByColumn = string.Empty;

        this.CurrentPage = 1;
        this.selectedInvoiceId = 0;
        ContainerStorage.SetCurrentPage(CurrentPath, 1);
        ContainerStorage.SetSelectedRecordId(CurrentPath, 0);
    }

    private void ToggleSort(string column)
    {
        if (listInvoices is null || !listInvoices.Any())
            return;

        // reset other columns
        foreach (var key in sortStates.Keys.ToList())
        {
            if (key != column)
            {
                sortStates[key] = 0;
            }
        }


        // advance states
        sortStates[column]++;
        this.sortingByColumn = column;

        this.CurrentPage = 1;
        this.selectedInvoiceId = 0;
        ContainerStorage.SetCurrentPage(CurrentPath, 1);
        ContainerStorage.SetSelectedRecordId(CurrentPath, 0);
        OnSortingCallBack.InvokeAsync();

        if (sortStates[column] > 2)
        {
            sortStates[column] = 0;
            this.sortingByColumn = string.Empty;

        }
    }

    private RenderFragment GetSortIcon(string column) => builder =>
    {
        string icon = sortStates[column] switch
        {
            1 => "▲", // ascending
            2 => "▼", // descending
            _ => ""
        };
        builder.AddContent(0, icon);
    };

    private void UpdatePagedInvoices()
    {
        if (listInvoices is not null && listInvoices.Any())
        {
            pagedListInvoices = listInvoices.Skip((CurrentPage - 1) * PageSize)
                                               .Take(PageSize)
                                                .ToList();

            int _totalPage = (int)Math.Ceiling((double)listInvoices.Count / PageSize);

            if (previousTotalPage != _totalPage)
            {
                previousTotalPage = _totalPage;
                TotalPagesCallBack.InvokeAsync(_totalPage);
                ContainerStorage.SetTotalPages(CurrentPath, _totalPage);
            }
            else
            {
                ContainerStorage.SetTotalPages(CurrentPath, _totalPage);

            }

        }

    }

    private async Task ShowInvoiceDetails(Invoice invoice)
    {
        selectedInvoice = invoice;
        selectedInvoiceId = invoice.InvoiceId;
        ContainerStorage.SetSelectedRecordId(CurrentPath, invoice.InvoiceId);

        await Task.Delay(100);
        await JSRuntime.InvokeVoidAsync("bootstrapInterop.showModal", "#userDetailModal");
    }

    private void HandleEditButton(int invoiceId)
    {

    }


    public void HandleDeleteButton(Invoice invoice)
    {
        if (invoice is not null)
        {
            invoice.IsDeleted = true;
            selectedInvoiceId = 0;
            ContainerStorage.SetSelectedRecordId(CurrentPath,0);

            InvoicesService.UpdateInvoiceService(invoice.InvoiceId, invoice);
            OnParametersSet();
            StateHasChanged();
        }
    }


}
