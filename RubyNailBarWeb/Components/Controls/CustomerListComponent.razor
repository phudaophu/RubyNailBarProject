@inject NavigationManager NavigationManager 
@inject ICustomersService CustomersService
@inject ContainerStorage ContainerStorage

@inject ICustomersService CustomersService
@attribute [StreamRendering]


<table class="table table-striped table-hover">


    <thead>
        <tr>
            <th>
                <button class="btn border-0 btn-sm"> Index </button>
            </th>
            <th>
                <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Customer Name"))">Customer Name  @GetSortIcon("Customer Name")</button>
            </th>

            <th>
                <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Phone No"))">Phone No @GetSortIcon("Phone No")</button>
            </th>

            <th> 
                <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Email"))">Email @GetSortIcon("Email")</button>
            </th>

            <th>
                <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Birthday"))">Birthday  @GetSortIcon("Birthday")</button>
            </th>

            <th>
                <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Points"))">Points @GetSortIcon("Points")</button>
            </th>

            <th>
                <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Last Visit"))">Last Visit @GetSortIcon("Last Visit")</button>
            </th>

            <th></th>
            <th></th>
        </tr>

    </thead>
    <tbody>
        @if (listCustomers != null && listCustomers.Any() && pagedListCustomers != null )
        {

            @foreach (var customer in pagedListCustomers)
            {
                <tr class="align-middle">
                    <td style="cursor:pointer" @onclick="@(e => ShowCustomerDetails(customer))">
                        @(listCustomers.FindIndex(c => c.CustomerId == customer.CustomerId) + 1)
                    </td>
                    <td style="cursor:pointer" @onclick="@(e => ShowCustomerDetails(customer))">
                        @customer.Name
                    </td>

                    <td style="cursor:pointer" @onclick="@(e => ShowCustomerDetails(customer))">
                        @customer.PhoneNo
                    </td>
                    <td style="cursor:pointer" @onclick="@(e => ShowCustomerDetails(customer))">
                        @customer.Email
                    </td>

                    <td style="cursor:pointer" @onclick="@(e => ShowCustomerDetails(customer))">
                        @customer.Birthday?.ToString("dd-MMM")  
                    </td>

                    <td style="cursor:pointer" @onclick="@(e => ShowCustomerDetails(customer))">
                        @customer.Points
                    </td>
                    <td style="cursor:pointer" @onclick="@(e => ShowCustomerDetails(customer))">
                        @customer.LastVisitDatetime?.ToString("dd/MM/yyyy") 
                    </td>
                    <td>
                            <a class="btn btn-outline-primary btn-sm px-2 py-0 text-nowrap"> Edit </a>
                    </td>
                    <td>
                            <a class="btn btn-outline-primary btn-sm px-2 py-0 text-nowrap"> Edit Group </a>
                    </td>
                </tr>
            }
        }

        else
        {
            <tr>
                <td class="text-center text-black-50" colspan="9">
                    @statusCustomerListView
                </td>
            </tr>
        }

    </tbody>


</table>


@code {

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public int CurrentPage { get; set; }

    [Parameter]
    public EventCallback<int> TotalPagesCallBack { get; set; }

    [Parameter]
    public EventCallback OnSortingCallBack { get; set; }    

    [Parameter]
    public string? FilteredCustomersData { get; set; }

    private int _selectedMonth = 0;

    [Parameter]
    public int SelectedMonthFilter
    {
        get => _selectedMonth;
        set
        {
            if(value >= 0 && value != _selectedMonth)
            {
                _selectedMonth = value;
                ClearSorting();
            }
        }
    }  

    private int previousTotalPage = -1;

    private bool isFirstRender = true;  

    private string statusCustomerListView = "Customer data is loading";

    private List<Customer>? listCustomers = new List<Customer>();

    private List<Customer>? pagedListCustomers = new List<Customer>();

    private Dictionary<string, int> sortStates = new()
    {
        { "Customer Name", 0 },
        { "Phone No",      0 },
        { "Email",         0 },
        { "Birthday",      0 },
        { "Points",        0 },
        { "Last Visit",    0 }
    };


    private bool IsSorrting()
    {
        foreach (var state in this.sortStates.Values)
        {
            if (state > 0)
            {
                return true;
            }
        }
        return false;
    }

    public void ClearSorting()
    {
        foreach (var key in sortStates.Keys.ToList())
        {
            sortStates[key] = 0;
        }
        this.CurrentPage = 1;
        ContainerStorage.setCurrentPage(1);
    }

    private void ToggleSort(string column)
    {
        if (listCustomers is null || !listCustomers.Any())
            return;

        // reset other columns
        foreach (var key in sortStates.Keys.ToList())
        {
            if (key != column)
            {
                sortStates[key] = 0;
            }

        }

        // advance states
        sortStates[column]++;

        this.CurrentPage = 1;
        ContainerStorage.setCurrentPage(1);
        OnSortingCallBack.InvokeAsync();


        if (sortStates[column] > 2)
        {
            sortStates[column] = 0;
        }

        switch (column)
        {
            case "Customer Name":
                ApplyLogicSort(u => u.Name, column);
                break;

            case "Phone No":
                ApplyLogicSort(u => u.PhoneNo, column);
                break;

            case "Email":
                ApplyLogicSort(u => u.Email, column);
                break;

            case "Birthday":
                // Sort by month and day only, ignoring year
                ApplyLogicSort(
                    u => u.Birthday.HasValue 
                        ? (u.Birthday.Value.Month, u.Birthday.Value.Day) 
                        : (int.MaxValue, int.MaxValue), 
                    column
                );
                break;  

            case "Points":
                ApplyLogicSort(u => u.Points, column);
                break;

            case "Last Visit":
                ApplyLogicSort(u => u.LastVisitDatetime, column);
                break;
        }

        //StateHasChanged();
    }


    private RenderFragment GetSortIcon(string column) => builder =>
    {
        string icon = sortStates[column] switch
        {
            1 => "▲", // ascending
            2 => "▼", // descending
            _ => ""
        };
        builder.AddContent(0, icon);
    };


    private void ApplyLogicSort<TKey>(Func<Customer, TKey> selector, string column)
    {
        switch (this.sortStates[column])
        {
            case 0:

                if (!string.IsNullOrWhiteSpace(this.FilteredCustomersData))
                {
                    listCustomers = CustomersService.SearchCustomerService(FilteredCustomersData);
                }
                else
                {
                    this.listCustomers = CustomersService.GetCustomersService();
                }

                break;

            case 1:
                if (listCustomers != null)
                {
                    this.listCustomers = listCustomers.OrderBy(selector).ToList();

                }
                break;

            case 2:
                if (listCustomers != null)
                {
                    this.listCustomers = listCustomers.OrderByDescending(selector).ToList();

                }
                break;
        }

    }


    private void UpdatePagedCustomers()
    {
        if (listCustomers is not null && listCustomers.Any())
        {
            pagedListCustomers = listCustomers.Skip((CurrentPage - 1) * PageSize)
                                   .Take(PageSize)
                                    .ToList();

            int _totalPage = (int)Math.Ceiling((double)listCustomers.Count / PageSize);

            if (previousTotalPage != _totalPage)
            {
                previousTotalPage = _totalPage;
                TotalPagesCallBack.InvokeAsync(_totalPage);
                ContainerStorage.setTotalPages(_totalPage);
            }
            else
            {
                ContainerStorage.setTotalPages(_totalPage);

            }

        }

    }

    protected override void OnParametersSet()
    {
        if (isFirstRender == false)
        {

            if ((listCustomers is null || listCustomers.Count == 0) && _selectedMonth == 0)
            {
                listCustomers = CustomersService.GetCustomersService();
                statusCustomerListView = "Data Is Loading...";
            }

            else if (string.IsNullOrWhiteSpace(this.FilteredCustomersData))
            {

                if (IsSorrting())
                {

                    statusCustomerListView = "Data Is Loading...";
                }
                else
                {
                    listCustomers = CustomersService.GetCustomersService();
                    statusCustomerListView = "Data Is Loading...";
                }

            }

            else if (!string.IsNullOrWhiteSpace(this.FilteredCustomersData))
            {
                if (IsSorrting())
                {
                    statusCustomerListView = "Data Is Loading...";
                }
                else
                {
                    listCustomers = CustomersService.SearchCustomerService(FilteredCustomersData);

                    statusCustomerListView = "Data Is Loading...";

                    if (listCustomers is null || listCustomers.Count == 0)
                    {
                        statusCustomerListView = "No User Found";
                    }
                }
            }


            if (SelectedMonthFilter > 0 && listCustomers is not null && listCustomers.Count > 0)
            {
                listCustomers = listCustomers.Where(c => c.Birthday?.Month == new DateOnly(2025, SelectedMonthFilter,1).Month).ToList();
                if (listCustomers.Count == 0)
                {
                    statusCustomerListView = "No Customer Found";
                }
            }

            this.PageSize = ContainerStorage.getLastPageSize();
            this.CurrentPage = ContainerStorage.getLastCurrentPage();

            UpdatePagedCustomers();
            StateHasChanged();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {

            isFirstRender = false;
            string currentPath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri).Split('?', '#')[0];
            ContainerStorage.resetPaginationData(currentPath);

            if (string.IsNullOrWhiteSpace(this.FilteredCustomersData))
            {
                listCustomers = CustomersService.GetCustomersService();
            }
            else
            {
                listCustomers = CustomersService.SearchCustomerService(FilteredCustomersData);
                if (listCustomers is null || listCustomers.Count == 0)
                {
                    statusCustomerListView = "No User Found";
                }

            }

            this.CurrentPage = ContainerStorage.getLastCurrentPage();
            this.PageSize = ContainerStorage.getLastPageSize();
            UpdatePagedCustomers();
            StateHasChanged();
        }
    }

  

    private void ShowCustomerDetails(Customer customer)
    {
        
    }



    
}
