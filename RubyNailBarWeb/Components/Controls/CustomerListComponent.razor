@inject NavigationManager NavigationManager 
@inject ICustomersService CustomersService
@inject ContainerStorage ContainerStorage
@inject FileUploadService FileUploadService

@inject ICustomersService CustomersService
@inject IJSRuntime JSRuntime    
@attribute [StreamRendering]


<table class="table table-striped table-hover">


    <thead>
        <tr >
            <th>
                <button class="btn border-0 btn-sm"> Index </button>
            </th>
            <th>
                <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Customer Name"))">Customer Name  @GetSortIcon("Customer Name")</button>
            </th>

            <th>
                <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Phone No"))">Phone No @GetSortIcon("Phone No")</button>
            </th>

@*             <th> 
                <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Email"))">Email @GetSortIcon("Email")</button>
            </th> *@

            <th>
                <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Birthday"))">Birthday  @GetSortIcon("Birthday")</button>
            </th>

            <th>
                <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Points"))">Points @GetSortIcon("Points")</button>
            </th>

            <th>
                <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Customer Level"))">Level @GetSortIcon("Customer Level")</button>
            </th>

            <th>
                <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Last Visit"))">Last Visit @GetSortIcon("Last Visit")</button>
            </th>

            <th></th>
            <th></th>
        </tr>

    </thead>
    <tbody>
        @if (listCustomers != null && listCustomers.Any() && pagedListCustomers != null )
        {

            @foreach (var customer in pagedListCustomers)
            {
                <tr class="align-middle @(customer.CustomerId == this.selectedCustomerId ? "selected-row" : "") ">
                    <td style="cursor:pointer" @onclick="@(e => ShowCustomerDetails(customer))">
                        @(listCustomers.FindIndex(c => c.CustomerId == customer.CustomerId) + 1)
                    </td>
                    <td style="cursor:pointer" @onclick="@(e => ShowCustomerDetails(customer))">
                        @customer.Name
                    </td>

                    <td style="cursor:pointer" @onclick="@(e => ShowCustomerDetails(customer))">
                        @customer.PhoneNo
                    </td>
@*                     <td style="cursor:pointer" @onclick="@(e => ShowCustomerDetails(customer))">
                        @customer.Email
                    </td> *@

                    <td style="cursor:pointer" @onclick="@(e => ShowCustomerDetails(customer))">
                        @customer.Birthday?.ToString("dd-MMM")  
                    </td>

                    <td style="cursor:pointer" @onclick="@(e => ShowCustomerDetails(customer))">
                        @customer.Points
                    </td>

                    <td style="cursor:pointer" @onclick="@(e => ShowCustomerDetails(customer))">
                        <span class="badge border @(customer.CustomerLevel?.Equals("Silver") == true ? "border-secondary text-secondary" : "")
                                                    @(customer.CustomerLevel?.Equals("Gold") == true ? "border-warning text-warning" : "")
                                                       @(customer.CustomerLevel?.Equals("Platinum") == true ? "border-success text-success" : "")
                                                          @(customer.CustomerLevel?.Equals("Diamond") == true ? "border-danger text-danger" : "") ">

                            @customer.CustomerLevel
                        </span>
                    </td>

                    <td style="cursor:pointer" @onclick="@(e => ShowCustomerDetails(customer))">
                        @customer.LastVisitDatetime?.ToString("dd/MM/yyyy") 
                    </td>
                    <td>
                        <a class="btn btn-outline-primary btn-sm px-2 py-0 text-nowrap" href="@($"/customer/{customer.CustomerId}")"> Edit </a>
                    </td>
                    <td>
                            <a class="btn btn-outline-primary btn-sm px-2 py-0 text-nowrap"> Invoices </a>
                    </td>
                </tr>
            }
        }

        else
        {
            <tr>
                <td class="text-center text-black-50" colspan="9">
                    @statusCustomerListView
                </td>
            </tr>
        }

    </tbody>


</table>



<!-- User Detail Modal -->
<div class="modal fade" id="userDetailModal" tabindex="-1" aria-labelledby="userDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="userDetailModalLabel">User Detail</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (selectedCustomer != null)
                {
                    <div class="row">
                        <!-- Profile Picture -->
                        <div class="col-md-3 text-center">
                            <img src="@(string.IsNullOrWhiteSpace(selectedCustomer.ImageUrl) ? FileUploadService.GetUserAvatarDefaultImage() : selectedCustomer.ImageUrl)"
                                 alt="User Image" class="img-thumbnail" style="max-width: 150px;" />
                        </div>

                        <!-- User Info -->
                        <div class="col-md-9">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5><i class="bi bi-person"></i> SUMMARY</h5>
                                <a class="btn btn-outline-warning btn-sm text-uppercase px-2 py-0" href=@($"/customer/{selectedCustomer.CustomerId}")>Edit</a>
                            </div>

                            <div class="row mt-3">
                                <div class="col-md-6">
                                    <div><strong>Name:</strong> @selectedCustomer.Name</div>
                                    <div><strong>Mobile:</strong> @selectedCustomer.PhoneNo</div>
                                    <div><strong>Birthday:</strong> @selectedCustomer.Birthday?.ToString("MMMM dd,yyyy")</div>

                                    <div class="mt-2"><strong>Email:</strong> <a href="mailto:@selectedCustomer.Email">@selectedCustomer.Email</a></div>
                                    <div><strong>Address:</strong> @selectedCustomer.Address1</div>
                                    <div><strong>Description:</strong> @selectedCustomer.Description</div>

@*                                  <div class="mt-2">
                                        <strong>Status:</strong>
                                        <span class="text-@(selectedUser.IsActive ? "success" : "danger")">
                                            @(selectedUser.IsActive ? "Active" : "Access Revoked")
                                        </span>
                                    </div> 
                                    <div><strong>Role:</strong> your role </div>*@
                                </div>

                                <div class="col-md-6">
                                    <div><strong>Points:</strong> @selectedCustomer.Points</div>
                                    <div><strong>Customer Level:</strong>
                                        <span class="badge border @(selectedCustomer.CustomerLevel?.Equals("Silver") == true ? "border-secondary text-secondary" : "")
                                                                    @(selectedCustomer.CustomerLevel?.Equals("Gold") == true ? "border-warning text-warning" : "") 
                                                                        @(selectedCustomer.CustomerLevel?.Equals("Platinum") == true ? "border-success text-success" : "")
                                                                            @(selectedCustomer.CustomerLevel?.Equals("Diamond") == true ? "border-danger text-danger" : "") ">

                                            @selectedCustomer.CustomerLevel</span>
                                    </div>
                                    <div><strong>Transaction Number:</strong> @selectedCustomer.TransactionCount</div>

                                    <div class="mt-2"><strong>Lifetime Spend:</strong> @selectedCustomer.LifetimeSpend</div>
                                    <div><strong>First Visit:</strong> @selectedCustomer.CreatedDatetime?.ToString("MMM dd,yyyy hh:mm:ss")</div>
                                    <div><strong>Last Visit:</strong> @selectedCustomer.LastVisitDatetime?.ToString("MMM dd,yyyy hh:mm:ss")</div>

                                   @* <div class="mt-2"><strong>Role Permissions:</strong> All</div> *@
                                   @*<div>
                                        <strong>User Access:</strong>
                                        <div class="small text-muted">
                                            Configuration, Users, History, Reports, Helpdesk, Supplier Portal Administrator, Employee Portal Administrator, Workflow Administrator
                                        </div>
                                    </div> *@
                                </div>
                            </div>

                            <!-- Groups / Roles / Stores -->
                            <hr />
                            <div>
                                <strong>Recent Invoice:</strong>
                               @*  <ul class="mb-0">
                                    @foreach (var group in selectedUser.UserGroups)
                                    {
                                        <li>
                                            @(group.StoreId != null ? StoresService.GetStoreById(group.StoreId.Value).Name : "N/A")
                                            - @group.GroupName - @group.RoleName
                                        </li>
                                    }
                                </ul> *@
                            </div>
                        </div>
                    </div>

                }
                else
                {
                    <p class="text-muted">No user selected.</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>



@code {

    private int selectedCustomerId = 0;

    private Customer? selectedCustomer;

    private async Task ShowCustomerDetails(Customer customer)
    {
        selectedCustomer = customer;
        selectedCustomerId = customer.CustomerId;
        ContainerStorage.SetSelectedRecordId(customer.CustomerId);

        await Task.Delay(100);

        await JSRuntime.InvokeVoidAsync("bootstrapInterop.showModal", "#userDetailModal");

    }

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public int CurrentPage { get; set; }

    [Parameter]
    public EventCallback<int> TotalPagesCallBack { get; set; }

    [Parameter]
    public EventCallback OnSortingCallBack { get; set; }    

    [Parameter]
    public string? FilteredCustomersData { get; set; }

    private int _selectedMonth = 0;

    [Parameter]
    public int SelectedMonthFilter
    {
        get => _selectedMonth;
        set
        {
            if(value >= 0 && value != _selectedMonth)
            {
                _selectedMonth = value;
                ClearSorting();
            }
        }
    }  

    private int previousTotalPage = -1;

    private bool isFirstRender = true;  

    private string statusCustomerListView = "Customer data is loading";

    private List<Customer>? listCustomers = new List<Customer>();

    private List<Customer>? pagedListCustomers = new List<Customer>();

    private string sortingByColumn = string.Empty;

    private Dictionary<string, int> sortStates = new()
    {
        { "Customer Name",  0 },
        { "Phone No",       0 },
        //{ "Email",          0 },
        { "Birthday",       0 },
        { "Points",         0 },
        { "Customer Level", 0 },
        { "Last Visit",     0 }
    };


    private void UpdateCustomerSorting(string sortingByColumn)
    {
        switch (sortingByColumn)
        {
            case "Customer Name":
                ApplyLogicSort(u => u.Name, sortingByColumn);
                break;

            case "Phone No":
                ApplyLogicSort(u => u.PhoneNo, sortingByColumn);
                break;

            case "Email":
                ApplyLogicSort(u => u.Email, sortingByColumn);
                break;

            case "Birthday":
                // Sort by month and day only, ignoring year
                ApplyLogicSort(
                    u => u.Birthday.HasValue
                        ? (u.Birthday.Value.Month, u.Birthday.Value.Day)
                        : (int.MaxValue, int.MaxValue),
                    sortingByColumn
                );
                break;

            case "Points":
                ApplyLogicSort(u => u.Points, sortingByColumn);
                break;

            case "Customer Level":
                {
                    var customerLevelOrder = new Dictionary<string, int>(StringComparer.OrdinalIgnoreCase)
                    {
                        { "Silver",     1 },
                        { "Gold",       2 },
                        { "Platinum",   3 },
                        { "Diamond",    4 }
                    };

                    ApplyLogicSort(
                        u => customerLevelOrder.ContainsKey(u.CustomerLevel ?? "") ? customerLevelOrder[u.CustomerLevel ?? ""] : int.MaxValue,
                        sortingByColumn
                    );
                    break;
                }

            case "Last Visit":
                ApplyLogicSort(u => u.LastVisitDatetime, sortingByColumn);
                break;

            default:
                break;
        }
    }

    public void ClearSorting()
    {
        foreach (var key in sortStates.Keys.ToList())
        {
            sortStates[key] = 0;
        }
        this.sortingByColumn = string.Empty;
        this.CurrentPage = 1;
        this.selectedCustomerId = 0;
        ContainerStorage.SetCurrentPage(1);
        ContainerStorage.SetSelectedRecordId(0);
    }

    private void ToggleSort(string column)
    {
        if (listCustomers is null || !listCustomers.Any())
            return;

        // reset other columns
        foreach (var key in sortStates.Keys.ToList())
        {
            if (key != column)
            {
                sortStates[key] = 0;
            }

        }

        // advance states
        sortStates[column]++;
        this.sortingByColumn = column;

        this.CurrentPage = 1;
        this.selectedCustomerId = 0;
        ContainerStorage.SetCurrentPage(1);
        ContainerStorage.SetSelectedRecordId(0);
        OnSortingCallBack.InvokeAsync();


        if (sortStates[column] > 2)
        {
            sortStates[column] = 0;
            this.sortingByColumn = string.Empty;

        }


    }


    private RenderFragment GetSortIcon(string column) => builder =>
    {
        string icon = sortStates[column] switch
        {
            1 => "▲", // ascending
            2 => "▼", // descending
            _ => ""
        };
        builder.AddContent(0, icon);
    };


    private void ApplyLogicSort<TKey>(Func<Customer, TKey> selector, string column)
    {
        switch (this.sortStates[column])
        {
            case 0:

                if (!string.IsNullOrWhiteSpace(this.FilteredCustomersData))
                {
                    listCustomers = CustomersService.SearchCustomerService(FilteredCustomersData);
                }
                else
                {
                    this.listCustomers = CustomersService.GetCustomersService();
                }

                break;

            case 1:
                if (listCustomers != null)
                {
                    this.listCustomers = listCustomers.OrderBy(selector).ToList();

                }
                break;

            case 2:
                if (listCustomers != null)
                {
                    this.listCustomers = listCustomers.OrderByDescending(selector).ToList();

                }
                break;
        }

    }


    private void UpdatePagedCustomers()
    {
        if (listCustomers is not null && listCustomers.Any())
        {
            pagedListCustomers = listCustomers.Skip((CurrentPage - 1) * PageSize)
                                   .Take(PageSize)
                                    .ToList();

            int _totalPage = (int)Math.Ceiling((double)listCustomers.Count / PageSize);

            if (previousTotalPage != _totalPage)
            {
                previousTotalPage = _totalPage;
                TotalPagesCallBack.InvokeAsync(_totalPage);
                ContainerStorage.SetTotalPages(_totalPage);
            }
            else
            {
                ContainerStorage.SetTotalPages(_totalPage);

            }

        }

    }

    protected override void OnParametersSet()
    {
        if (isFirstRender == false)
        {

            if (listCustomers is not null && listCustomers?.Count >= 0)
            {
                listCustomers = CustomersService.GetCustomersService();
                statusCustomerListView = "Data Is Loading...";
            }
            else
            {
                statusCustomerListView = "No User Found";
            }
        

            if (listCustomers is not null && listCustomers.Count >= 0 && !string.IsNullOrWhiteSpace(FilteredCustomersData))
            {
                listCustomers = CustomersService.SearchCustomerService(FilteredCustomersData);

                statusCustomerListView = "Data Is Loading...";

                if (listCustomers is null || listCustomers.Count == 0)
                {
                    statusCustomerListView = "No Customer Found";
                }
            }

            if (listCustomers is not null && listCustomers.Count >= 0 && SelectedMonthFilter > 0)
            {
                listCustomers = listCustomers.Where(c => c.Birthday?.Month == new DateOnly(2025, SelectedMonthFilter,1).Month).ToList();
                if (listCustomers.Count == 0)
                {
                    statusCustomerListView = "No Customer Found";
                }
            }

            this.PageSize = ContainerStorage.GetLastPageSize();
            this.CurrentPage = ContainerStorage.GetLastCurrentPage();
            this.selectedCustomerId = ContainerStorage.GetLastSelectedRecordId();

            UpdateCustomerSorting(sortingByColumn);
            UpdatePagedCustomers();
            StateHasChanged();
        }

    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {

            isFirstRender = false;
            string currentPath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri).Split('?', '#')[0];
            ContainerStorage.ResetPaginationData(currentPath);

            if (string.IsNullOrWhiteSpace(this.FilteredCustomersData))
            {
                listCustomers = CustomersService.GetCustomersService();
            }
            else
            {
                listCustomers = CustomersService.SearchCustomerService(FilteredCustomersData);
                if (listCustomers is null || listCustomers.Count == 0)
                {
                    statusCustomerListView = "No User Found";
                }

            }

            this.CurrentPage = ContainerStorage.GetLastCurrentPage();
            this.PageSize = ContainerStorage.GetLastPageSize();
            this.selectedCustomerId = ContainerStorage.GetLastSelectedRecordId();

            UpdatePagedCustomers();
            StateHasChanged();
        }
    }

   
}
