@inject ContainerStorage ContainerStorage

@inject IUsersService UsersService

@inject IStoresService StoresService

@inject ContainerStorage ContainerStorage

@inject FileUploadService FileUploadService

@inject IJSRuntime JSRuntime

@inject NavigationManager NavigationManager    

@attribute [StreamRendering]

<div class="table-responsive" style=" max-height: 450px; overflow-y: auto;">
    <table class="table table-striped table-hover">
        <thead class="table-light">
            <tr style="position:sticky; top:0; background:#f8f9fa; z-index:2;">
            <th>
                <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Index"))">Index @GetSortIcon("Index")</button>
            </th>
            <th>
                <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Store"))">Store @GetSortIcon("Store")</button>
            </th>
            <th>
                <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Firstname"))">Fullname @GetSortIcon("Firstname")</button>
            </th>
            <th> 
                <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Username"))">Username @GetSortIcon("Username")</button>
            </th>
            <th>
                <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Group"))">Group @GetSortIcon("Group")</button>
            </th>
            <th>
                <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Role"))">Role @GetSortIcon("Role")</button>
            </th>
            <th>
                <button type="button" class="btn border-0 btn-sm text-nowrap px-3" @onclick="@(() => ToggleSort("Status"))">Status @GetSortIcon("Status")</button>
            </th>
            <th></th>
            <th></th>
            <th></th>
        </tr>

    </thead>
    <tbody>
        @if (listUsers != null && listUsers.Any() && PagedUsers != null)
        {
            
            @foreach (var user in PagedUsers)
            {
                <tr class="align-middle" style="background-color:  @(user.UserId == this.selectedUserId ? "#d8dbf2" : "white")">
                    <td style="cursor:pointer" @onclick="@(e => ShowUserDetails(user))">
                        @(listUsers.FindIndex(u => u.UserId == user.UserId) + 1)
                    </td>
                    <td style="cursor:pointer" @onclick="@(e => ShowUserDetails(user))">
                        @if (user.UserGroups.Any())
                        {
                            var listStoreId = user.UserGroups
                                                    .Select(ug => ug.StoreId)
                                                    .OfType<int>()
                                                    .ToList();

                            foreach(var storeId in listStoreId)
                            {
                                <span class="badge text-dark border border-dark">@StoresService.GetStoreByIdService(storeId).Name</span>
                                <br>
                            }
                        }
                        else
                        {
                            <span>N/A</span>
                        }
                    </td>

                    <td style="cursor:pointer" @onclick="@(e => ShowUserDetails(user))">
                        @($"{user.FirstName} {@user.LastName}")
                    </td>
                    <td style="cursor:pointer" @onclick="@(e => ShowUserDetails(user))">
                        @user.Username
                    </td>

                    <td style="cursor:pointer" @onclick="@(e => ShowUserDetails(user))">
                        @if (user.UserGroups.Any())
                        {
                            foreach (var group in user.UserGroups)
                            {
                                <span class="badge border @(group.GroupName == "Manager" ? "text-primary border-primary" : "text-black border-dark")">@group.GroupName</span>
                               <br />
                            }
                        }
                        else
                        {
                           <text>N/A</text>
                        }
                    </td>

                    <td style="cursor:pointer" @onclick="@(e => ShowUserDetails(user))">
                        @if (user.UserGroups.Any())
                        {
                            foreach (var group in user.UserGroups)
                            {
                                <span class="badge border @(group.RoleName == "Admin" ? "text-primary border-primary" : "text-black border-dark")">@group.RoleName</span>
                                <br />
                            }
                        }
                        else
                        {
                            <text>N/A</text>
                        }
                    </td>
                    <td style="cursor:pointer" @onclick="@(e => ShowUserDetails(user))">
                        <span class="badge  border @(user.IsActive ? "text-success border-success" : "text-danger border-danger")">@(user.IsActive ? "Active" : "InActive")</span>

                    </td>
                    <td>
                        @if (user.IsActive == true)
                        {
                            <button type="button" class="btn btn-outline-danger btn-sm px-2 py-0 text-nowrap"
                                    @onclick="@(() => {
                                                        SetUserStatus(user.UserId,false);
                                                                                             })">
                              Turn Off
                          </button>
                    }
                                else
                    {
                        <button type="button" class="btn btn-outline-success btn-sm px-2 py-0 text-nowrap"
                                    @onclick="@(() => { 
                                                         SetUserStatus(user.UserId,true);
                                                                                            })">
                          Turn On
                      </button>
                    }
                    &nbsp;
                    </td>
                    <td>
    @*                 <a class="btn btn-outline-primary btn-sm px-2 py-0 text-nowrap" href=@($"/user/{user.UserId}")> Edit </a>
     *@                 <button type="button" class="btn btn-outline-secondary btn-sm px-2 py-0 text-nowrap" @onclick="(e) => HandleEditButton(user.UserId)">Edit</button>
                    </td>
                    <td>
@*                     <a class="btn btn-outline-primary btn-sm px-2 py-0 text-nowrap" href=@($"/usergroups/{user.UserId}")> Edit Group </a>
 *@                    <button type="button" class="btn btn-outline-secondary btn-sm px-2 py-0 text-nowrap" @onclick="(e) => HandleEditGroupButton(user.UserId)">Edit Group</button>
                    </td>
                </tr>
            }

        }


        else
        {
            <tr>
                <td class="text-center text-black-50" colspan="10">
                    @statusUserListView
                </td>
            </tr>
        }

    </tbody>


</table>
</div>
<!-- User Detail Modal -->
<div class="modal fade" id="userDetailModal" tabindex="-1" aria-labelledby="userDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="userDetailModalLabel">User Detail</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (selectedUser != null)
                {
                    <div class="row">
                        <!-- Profile Picture -->
                        <div class="col-md-3 text-center">
                            <img src="@(string.IsNullOrWhiteSpace(selectedUser.ImageUrl) ? FileUploadService.GetUserAvatarDefaultImage() : selectedUser.ImageUrl)"
                                 alt="User Image" class="img-thumbnail" style="max-width: 150px;" />
                        </div>

                        <!-- User Info -->
                        <div class="col-md-9">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5><i class="bi bi-person"></i> SUMMARY</h5>
                                <a class="btn btn-outline-warning btn-sm text-uppercase px-2 py-0" href=@($"/user/{selectedUser.UserId}")>Edit</a>
                            </div>

                            <div class="row mt-3">
                                <div class="col-md-6">
                                    <div><strong>Name:</strong> @selectedUser.FirstName @selectedUser.LastName</div>
                                    <div><strong>Username:</strong> @selectedUser.Username</div>
                                    <div><strong>Team:</strong> <a href="#">your team name</a></div>
                                    <div class="mt-2">
                                        <strong>Status:</strong>
                                        <span class="text-@(selectedUser.IsActive ? "success" : "danger")">
                                            @(selectedUser.IsActive ? "Active" : "Access Revoked")
                                        </span>
                                    </div>
                                    <div><strong>Role:</strong> your role </div>
                                </div>

                                <div class="col-md-6">
                                    <div><strong>Email:</strong> <a href="mailto:@selectedUser.Email">@selectedUser.Email</a></div>
                                    <div><strong>Mobile:</strong> @selectedUser.PhoneNo</div>
                                    <div><strong>Address:</strong> @selectedUser.Address1</div>
                                    <div class="mt-2"><strong>Role Permissions:</strong> All</div>
                                    <div>
                                        <strong>User Access:</strong>
                                        <div class="small text-muted">
                                            Configuration, Users, History, Reports, Helpdesk, Supplier Portal Administrator, Employee Portal Administrator, Workflow Administrator
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Groups / Roles / Stores -->
                            <hr />
                            <div>
                                <strong>Store & Group & Role:</strong>
                                <ul class="mb-0">
                                    @foreach (var group in selectedUser.UserGroups)
                                    {
                                        <li>
                                            @(group.StoreId != null ? StoresService.GetStoreByIdService(group.StoreId.Value).Name : "N/A")
                                            - @group.GroupName - @group.RoleName
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>

                }
                else
                {
                    <p class="text-muted">No user selected.</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>



@code {

    [Parameter]
    public string CurrentPath {get;set;} = string.Empty;

    private int selectedUserId = 0;

    private User? selectedUser;

    private async Task ShowUserDetails(User user)
    {
        selectedUser = user;
        selectedUserId = user.UserId;
        ContainerStorage.SetSelectedRecordId(CurrentPath, user.UserId);
        //ContainerStorage.SetOptionalData(CurrentPath, "SelectedStoreId", user.UserId);
        await Task.Delay(100);
        await JSRuntime.InvokeVoidAsync("bootstrapInterop.showModal", "#userDetailModal");

    }


    private List<User>? PagedUsers { get; set; }

    private int _selectedStoreId = 0;

    [Parameter]
    public int SelectedStoreIdFilter
    {

        get => _selectedStoreId;
        set
        {
            if (value >= 0 && value != _selectedStoreId)
            {
                _selectedStoreId = value;
                //ClearSorting();

            }
        }

    }

    [Parameter]
    public int CurrentPage { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public EventCallback OnSortingCallBack { get; set; }

    [Parameter]
    public EventCallback<int> TotalPagesCallBack { get; set; }

    private int previousTotalPage = -1;

    private void UpdatePagedUsers()
    {
        if (listUsers is not null && listUsers.Any())
        {
            PagedUsers = listUsers.Skip((CurrentPage - 1) * PageSize)
                                   .Take(PageSize)
                                    .ToList();

            int _totalPage = (int)Math.Ceiling((double)listUsers.Count / PageSize);

            if (previousTotalPage != _totalPage)
            {
                previousTotalPage = _totalPage; 
                TotalPagesCallBack.InvokeAsync(_totalPage);
                ContainerStorage.SetTotalPages(CurrentPath, _totalPage);
            }
            else
            {
                ContainerStorage.SetTotalPages(CurrentPath, _totalPage);

            }

        }

    }

    [Parameter]
    public string? SearchingUsersData { set; get; }

    private List<User>? listUsers = new List<User>();

    private bool isFirstRender = true;

    private string? statusUserListView = "Data Is Loading...";

    private string sortingByColumn = string.Empty;       

    private Dictionary<string, int> sortStates = new()
    {
        { "Index",     0 },
        { "Store",     0 },
        { "Firstname", 0 },
        { "Username",  0 },
        { "Group",     0 },
        { "Status",    0 },
        { "Role",      0 }
    };


    private void UpdateUserSorting(string sortingColumn)
    {

        switch (sortingColumn)
        {
            case "Index":
                ApplyLogicSort(u => u.UserId, sortingColumn);
                break;

            case "Firstname":
                ApplyLogicSort(u => u.FirstName, sortingColumn);
                break;

            case "Store":
                ApplyLogicSort(u => u.UserGroups.Count, sortingColumn);
                break;

            case "Username":
                ApplyLogicSort(u => u.Username, sortingColumn);
                break;

            case "Group":
                ApplyLogicSort(u => u.UserGroups.Count, sortingColumn);
                break;

            case "Role":
                ApplyLogicSort(u => u.UserGroups.Count, sortingColumn);
                break;

            case "Status":
                ApplyLogicSort(u => u.IsActive, sortingColumn);
                break;
            default:
                break;
        }

    }

    public void ClearSorting()
    {
        foreach (var key in sortStates.Keys.ToList())
        {
            sortStates[key] = 0;
        }

        this.sortingByColumn = string.Empty;

        this.CurrentPage = 1;
        this.selectedUserId = 0;
        ContainerStorage.SetCurrentPage(CurrentPath, 1);
        ContainerStorage.SetSelectedRecordId(CurrentPath, 0);
        
    }

    private void ToggleSort(string column)
    {
        if (listUsers is null || !listUsers.Any())
            return;

        // reset other columns
        foreach (var key in sortStates.Keys.ToList())
        {
            if (key != column)
            {
                sortStates[key] = 0;
            }

        }

        sortStates[column]++;
        this.sortingByColumn = column;

        this.CurrentPage = 1;
        this.selectedUserId = 0;    
        ContainerStorage.SetCurrentPage(CurrentPath, 1);
        ContainerStorage.SetSelectedRecordId(CurrentPath, 0);
        OnSortingCallBack.InvokeAsync();


        if (sortStates[column] > 2)
        {
            sortStates[column] = 0;
            this.sortingByColumn = string.Empty;
        }

    }


    private RenderFragment GetSortIcon(string column) => builder =>
    {
        string icon = sortStates[column] switch
        {
            1 => "▲", // ascending
            2 => "▼", // descending
            _ => ""
        };
        builder.AddContent(0, icon);
    };


    private void ApplyLogicSort<TKey>(Func<User,TKey> selector, string column)
    {
        switch (this.sortStates[column])
        {
            case 0:

                if (!string.IsNullOrWhiteSpace(this.SearchingUsersData))
                {
                    listUsers = UsersService.SearchUserService(SearchingUsersData);
                }
                else
                {
                    this.listUsers = UsersService.GetUsersService();
                }

                break;

            case 1:
                if(listUsers != null)
                {
                    this.listUsers = listUsers.OrderBy(selector).ToList();

                }
                break;

            case 2:
                if(listUsers != null)
                {
                    this.listUsers = listUsers.OrderByDescending(selector).ToList();

                }
                break;
        }

    }

    protected override void OnParametersSet()
    {
        if (isFirstRender == false)
        {


            this.SearchingUsersData = ContainerStorage.GetLastSearchedText(CurrentPath);
            if (ContainerStorage.GetOptionalData(CurrentPath).Count >= 0 && ContainerStorage.GetOptionalData(CurrentPath).Keys.Contains("SelectedStoreId"))
            {
                _selectedStoreId = ContainerStorage.GetOptionalData(CurrentPath)["SelectedStoreId"];
            }

            if (listUsers is not null || listUsers?.Count >= 0)
            {
                listUsers = UsersService.GetUsersService();
                statusUserListView = "Data Is Loading...";
            }


            if (listUsers is not null && listUsers.Count >= 0 && !string.IsNullOrWhiteSpace(SearchingUsersData))
            {
                listUsers = UsersService.SearchUserService(SearchingUsersData);

                statusUserListView = "Data Is Loading...";

                if (listUsers is null || listUsers.Count == 0)
                {
                    statusUserListView = "No User Found";
                }
            }

                                                            //SelectedStoreIdFilter
            if (listUsers is not null && listUsers.Count >= 0 && _selectedStoreId > 0)
            {
                listUsers = listUsers.Where(u => u.UserGroups.Any(ug => ug.StoreId == _selectedStoreId)).ToList();

                statusUserListView = "Data Is Loading...";

                if (listUsers is null || listUsers.Count == 0)
                {
                    statusUserListView = "No User Found";
                }
            }


            this.PageSize = ContainerStorage.GetLastPageSize(CurrentPath);
            this.CurrentPage = ContainerStorage.GetLastCurrentPage(CurrentPath);
            this.selectedUserId = ContainerStorage.GetLastSelectedRecordId(CurrentPath);



            UpdateUserSorting(sortingByColumn);
            UpdatePagedUsers();
            StateHasChanged();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            isFirstRender = false;
            this.SearchingUsersData = ContainerStorage.GetLastSearchedText(CurrentPath);
            if (ContainerStorage.GetOptionalData(CurrentPath).Count >= 0 && ContainerStorage.GetOptionalData(CurrentPath).Keys.Contains("SelectedStoreId"))
            {
                this.SelectedStoreIdFilter = ContainerStorage.GetOptionalData(CurrentPath)["SelectedStoreId"];
            }


            if (listUsers is not null || listUsers?.Count >= 0)
            {
                listUsers = UsersService.GetUsersService();
                statusUserListView = "Data Is Loading...";
            }


            if (listUsers is not null && listUsers.Count >= 0 && !string.IsNullOrWhiteSpace(SearchingUsersData))
            {
                listUsers = UsersService.SearchUserService(SearchingUsersData);

                statusUserListView = "Data Is Loading...";

                if (listUsers is null || listUsers.Count == 0)
                {
                    statusUserListView = "No User Found";
                }
            }


            if (listUsers is not null && listUsers.Count >= 0 && SelectedStoreIdFilter > 0)
            {
                listUsers = listUsers.Where(u => u.UserGroups.Any(ug => ug.StoreId == SelectedStoreIdFilter)).ToList();

                statusUserListView = "Data Is Loading...";

                if (listUsers is null || listUsers.Count == 0)
                {
                    statusUserListView = "No User Found";
                }
            }

            this.CurrentPage = ContainerStorage.GetLastCurrentPage(CurrentPath);
            this.PageSize = ContainerStorage.GetLastPageSize(CurrentPath);
            this.selectedUserId = ContainerStorage.GetLastSelectedRecordId(CurrentPath);

            UpdatePagedUsers();
            StateHasChanged();
        }
    }


    private void SetUserStatus(int userId, bool status)
    {
        var userToUpdate = UsersService.GetUserByIdService(userId);
        if (userToUpdate is not null && userToUpdate.IsActive != status)
        {
            if (selectedUserId != userId)
            {
                selectedUserId = userId;
                ContainerStorage.SetSelectedRecordId(CurrentPath, userId);
            }

            userToUpdate.IsActive = status;
            UsersService.UpdateUserService(userToUpdate.UserId, userToUpdate);
            listUsers = UsersService.GetUsersService();
            UpdatePagedUsers();
        }
        else
        {
            return;
        }
    }

    private void HandleEditButton(int userId)
    {
        if(selectedUserId != userId)
        {
            selectedUserId = userId;
            ContainerStorage.SetSelectedRecordId(CurrentPath, userId);
        }

        NavigationManager.NavigateTo($"/user/{userId}");

    }

    private void HandleEditGroupButton(int userId)
    {
        if (selectedUserId != userId)
        {
            selectedUserId = userId;
            ContainerStorage.SetSelectedRecordId(CurrentPath, userId);
        }

        NavigationManager.NavigateTo($"/usergroups/{userId}");
    }

}
