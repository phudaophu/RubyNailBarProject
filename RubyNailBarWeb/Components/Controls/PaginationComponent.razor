@inject ContainerStorage ContainerStorage   

<div class="d-flex justify-content-between align-items-center mt-3">

    <!-- Page Size Dropdown -->
    <div class="d-flex align-items-center">
        <label class="me-2">Rows per page:</label>
        <InputSelect class="form-select form-select-sm w-auto" @bind-Value="PageSize">
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="15">15</option>
            <option value="20">20</option>
        </InputSelect>

    </div>

        <!-- Pagination Controls -->
        <div class="d-flex align-items-center">
            <button class="@(CurrentPage == 1 ? "btn btn-sm btn-light" : "btn btn-sm btn-secondary")" @onclick="PrevPage" disabled="@(CurrentPage == 1)"> ←</button>
            &nbsp;
            <span>Page @CurrentPage of @TotalPages</span>
            &nbsp;
            <button class="@(CurrentPage == TotalPages ? "btn btn-sm btn-light" : "btn btn-sm btn-secondary")" @onclick="NextPage" disabled="@(CurrentPage == TotalPages)">→ </button>
        </div>
    </div>




@code {
    // parameter output is pageSize, currentPage, totalPages

    // parameter input is ListUsers.Count => cal totalPages
    // private int currentPage = 1; 

    private bool isFirstRender = true;

    [Parameter]
    public int CurrentPage { get; set; }

    [Parameter]
    public int TotalPages { get; set; }

    int _pageSize = 5; // default page size

    [Parameter]
    public int PageSize 
    {   get => _pageSize; 
        set
        {
            if(value > 0 && value != _pageSize)
            {
                _pageSize = value;
                CurrentPage  = 1;
                ContainerStorage.setPaginationData(CurrentPage, 0, value);
                PageSizeCallBack.InvokeAsync(value);
            }
        }
    }



    [Parameter]
    public EventCallback<int> CurrentPageCallBack { get; set; }

    [Parameter]
    public EventCallback<int> PageSizeCallBack { get; set; }

    private void PrevPage()
    {
        if (this.CurrentPage > 1)
        {

            this.CurrentPage--;
            ContainerStorage.setPaginationData(CurrentPage, TotalPages, PageSize);
            CurrentPageCallBack.InvokeAsync(CurrentPage);
            //UpdatePagedUsers();
        }
    }

    private void NextPage()
    {
        if (this.CurrentPage < this.TotalPages)
        {
            CurrentPage++;
            ContainerStorage.setPaginationData(CurrentPage, TotalPages, PageSize);
            CurrentPageCallBack.InvokeAsync(CurrentPage);
            //UpdatePagedUsers();
        }
    }

    protected override void OnParametersSet()
    {
        if(!isFirstRender)
        {
            // Ensure that the parameters are set correctly after the first render
            
            this._pageSize = ContainerStorage.getLastPageSize();
            CurrentPage = ContainerStorage.getLastCurrentPage();
            TotalPages = ContainerStorage.getLastTotalPage();
            //ContainerStorage.setPaginationData(CurrentPage, TotalPages, PageSize);
            StateHasChanged();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            isFirstRender = false;
            
            //PageSize = ContainerStorage.getLastPageSize();
            this._pageSize = ContainerStorage.getLastPageSize();
            CurrentPage = ContainerStorage.getLastCurrentPage();
            TotalPages = ContainerStorage.getLastTotalPage();
            
            StateHasChanged(); 
        }
    }



}
