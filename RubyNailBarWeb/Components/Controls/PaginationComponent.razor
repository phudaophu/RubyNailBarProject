
<div class="d-flex justify-content-between align-items-center mt-3">

    <!-- Page Size Dropdown -->
    <div class="d-flex align-items-center">
        <label class="me-2">Rows per page:</label>
        <InputSelect class="form-select form-select-sm w-auto" @bind-Value="@pageSize">
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="15">15</option>
            <option value="20">20</option>
        </InputSelect>

    </div>

    <!-- Pagination Controls -->
    <div class="d-flex align-items-center">
        <button class="@(currentPage == 1 ? "btn btn-sm btn-light" : "btn btn-sm btn-secondary")" @onclick="PrevPage" disabled="@(currentPage == 1)"> ←</button>
        &nbsp;
        <span>Page @currentPage of @totalPages</span>
        &nbsp;
        <button class="@(currentPage == totalPages ? "btn btn-sm btn-light" : "btn btn-sm btn-secondary")" @onclick="NextPage" disabled="@(currentPage == totalPages)">→ </button>
    </div>
</div>




@code {

    [Parameter]
    public List<User> ListUsers { get; set; } = new List<User>();   

    public EventCallback<List<User>> listPagedUsersCalBack { get; set; }

    private int currentPage = 1;

    private int _pageSize = 5;

    private int pageSize
    {
        get => _pageSize;
        set
        {
            if (value > 0 && value != _pageSize)
            {
                _pageSize = value;
                currentPage = 1; // Optional: reset page
                UpdatePagedUsers(); // Refresh your paged list
            }
        }
    }

    private int totalPages
    {
        get
        {
            if (ListUsers is null || !ListUsers.Any())
            {
                return 1;
            }
            return (int)Math.Ceiling((double)ListUsers.Count / _pageSize);
        }
    }


    private void OnPageSizeChanged()
    {
        currentPage = 1;
        UpdatePagedUsers();

    }

    private void PrevPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdatePagedUsers();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            UpdatePagedUsers();
        }
    }

    private void UpdatePagedUsers()
    {
        if (ListUsers is not null && ListUsers.Any())
        {
            listPagedUsersCalBack.InvokeAsync(ListUsers
                                                .Skip((currentPage - 1) * _pageSize)
                                                .Take(_pageSize)
                                                .ToList());
        }

    }


}
