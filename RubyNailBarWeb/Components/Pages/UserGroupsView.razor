@page "/usergroups/{id:int?}"

@inject IStoresService StoresService
@inject IUserGroupService UserGroupService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime


<h3>UserGroupsView</h3>


<table class="table table-striped">
    <thead>
        <tr>
            <th>
                Index
            </th>
            <th>
                Store
            </th>
            <th>
                Group
            </th>
            <th>
                Role
            </th>
            <th>
            </th>

        </tr>
    </thead>
    <tbody>
        @if (listUserGroup != null && listUserGroup.Count > 0)
        {
            int i = 0;

            @foreach (var userGroup in listUserGroup)
            {
                <tr>
                    <td>
                        @(++i)
                    </td>
                    <td>
                        @if (userGroup.Store != null)
                        {

                            <InputSelect @bind-Value="userGroup.StoreId" class="form-select">

                                @foreach (var store in listStores)
                                {
                                    <option value="@store.StoreId">@store.Name</option>
                                }
                            </InputSelect>

                        }
                        else
                        {
                            <span class="text-muted">No Store Data</span>
                        }
                    </td>
                    <td>

                        <InputSelect @bind-Value="userGroup.GroupName" class="form-select" >

                            <option value="" disabled selected>Select Group</option>
                            @foreach (var element in dictGroupRole)
                            {
                                <option value="@element.Key">@element.Key</option>
                            }
                        </InputSelect>
                    </td>
                    <td>
                        <InputSelect @bind-Value="userGroup.RoleName" class="form-select">

                            <option value="" disabled selected>Select Role </option>
                            @if (!string.IsNullOrEmpty(userGroup.GroupName) && dictGroupRole.TryGetValue(userGroup.GroupName, out var listRole))
                            {
                                @foreach (var role in listRole)
                                {
                                    <option value="@role">@role</option>
                                }
                            }

                        </InputSelect>
                    </td>

                    <td>
                        <button type="button" class="btn btn-outline-danger" @onclick="() => DeleteUserGroup(userGroup.UserGroupId)">Delete</button>
                    </td>
                </tr>

            }
        }
        else
        {
            <tr>
                <td class="text-center text-black-50" colspan="4">
                    @statusUserListView
                </td>
            </tr>
        }

    </tbody>

</table>


@if (this.listUserGroup != null && listUserGroup.Count > 0)
{
    <a class="btn btn-primary" href=@($"/user/{Id}")> Back </a>

}
&nbsp

@if (this.Id.HasValue)
{
    <button type="button" class="btn btn-primary" @onclick="() => AddUserGroup(this.Id.Value)"> Add Group</button>
}

&nbsp
<button type="button" class="btn btn-primary" @onclick="() => SaveUserGroupChange()"> Save</button>




@code {
    [Parameter]
    public int? Id { get; set; }

    private string statusUserListView = "Data Is Loading...";

    private List<UserGroup> listNewUserGroup = new List<UserGroup>();

    private List<Store> listStores = new List<Store>();

    private List<UserGroup>? listUserGroup = new List<UserGroup>();

    private Dictionary<string, List<string>> dictGroupRole = new Dictionary<string, List<string>>
    {
        { "Manager", new List<string> { "Admin","Viewer" } },
        { "Staff", new List<string> { "Staff" } }
    };

    protected override void OnParametersSet()
    {
        if (this.Id.HasValue)
        {
            listUserGroup = UserGroupService.GetUserGroupsByUserId(this.Id.Value);
            if (listUserGroup != null && listUserGroup.Count > 0)
            {
                statusUserListView = "Data Loaded Successfully";
                listStores = StoresService.GetStores();
                StateHasChanged();
            }
            else
            {
                statusUserListView = "No User Groups Found";
            }
        }
        else
        {
            listUserGroup = new List<UserGroup>();
        }
    }


    private async Task SaveUserGroupChange()
    {
        if (listUserGroup != null && listUserGroup.Count > 0)
        {
            List<UserGroup> listValidUserGroup = new List<UserGroup>();
            List<UserGroup> listInValidUserGroup = new List<UserGroup>();

            foreach (var userGroup in listUserGroup)
            {

                if (CheckEmptyUserGroup(userGroup) && CheckDuplicateUserGroup(userGroup))
                {
                    listValidUserGroup.Add(userGroup);

                }
                else
                {
                    listInValidUserGroup.Add(userGroup);
                }

            }

            if (listInValidUserGroup.Count == 0 && listUserGroup.Count == listValidUserGroup.Count)
            {
                int numberElementToAdd = listValidUserGroup.Count - listNewUserGroup.Count;
                if(numberElementToAdd == 0)
                {
                    foreach (var validUserGroup in listValidUserGroup.Skip(numberElementToAdd).ToList())
                    {
                        validUserGroup.Store = null;
                        UserGroupService.AddUserGroup(validUserGroup);
                    }
                }else if (numberElementToAdd > 0)
                {
                    foreach (var validUserGroup in listValidUserGroup.Take(numberElementToAdd).ToList())
                    {
                        UserGroupService.UpdateUserGroup(validUserGroup.UserGroupId, validUserGroup);
                    }
                    foreach (var validUserGroup in listValidUserGroup.Skip(numberElementToAdd).ToList())
                    {
                        validUserGroup.Store = null;
                        UserGroupService.AddUserGroup(validUserGroup);
                    }
                }
               
                statusUserListView = "User Groups Updated Successfully";
                StateHasChanged();
                NavigationManager.NavigateTo("/users");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"There Are {listInValidUserGroup.Count} Groups Is Invalid \n Do not let Group/ Role empty. \n Make Sure There Is No Duplicate Row !");
                foreach (var invalidUserGroup in listInValidUserGroup)
                {
                    //UserGroupService.RemoveUserGroup(invalidUserGroup.UserGroupId);
                    listUserGroup.Remove(invalidUserGroup);
                    StateHasChanged();
                }
                //NavigationManager.Refresh(true);

            }

        }
        else
        {
            statusUserListView = "No User Groups to Update";
        }




    }

    private bool CheckEmptyUserGroup(UserGroup userGroupToCheck)
    {

        if (listUserGroup != null && listUserGroup.Count > 0)
        {
            foreach (var currentUserGroup in listUserGroup)
            {
                if (string.IsNullOrEmpty(userGroupToCheck.GroupName) || string.IsNullOrEmpty(userGroupToCheck.RoleName))
                {
                    return false;
                }
            }
        }

        return true;
    }


    private bool CheckDuplicateUserGroup(UserGroup userGroupToCheck)
    {

        if (listUserGroup != null && listUserGroup.Count > 0)
        {
            foreach (var currentUserGroup in listUserGroup)
            {

                if (currentUserGroup.UserGroupId == userGroupToCheck.UserGroupId)
                    continue;

                if (currentUserGroup.GroupName == userGroupToCheck.GroupName &&
                    currentUserGroup.RoleName == userGroupToCheck.RoleName &&
                    currentUserGroup.StoreId == userGroupToCheck.StoreId)
                {
                    return false;
                }
            }
        }
        return true;
    }

    private void DeleteUserGroup(int userGroupId)
    {

        if (listUserGroup != null && listUserGroup.Count > 0)
        {
            listUserGroup.RemoveAll(ug => ug.UserGroupId == userGroupId);
            StateHasChanged();
        }

    }

    private void AddUserGroup(int userId)
    {
        Store? storeActiveDefault = StoresService.GetStores().Where(s => s.IsActive == true).FirstOrDefault();
        //int userGroupId = UserGroupService.GetMaxUserGroupId() + 1;
        if (storeActiveDefault != null && this.Id.HasValue)
        {
            UserGroup newUserGroup = new UserGroup()
            {
                //UserGroupId = userGroupId,
                StoreId = storeActiveDefault.StoreId,
                Store = storeActiveDefault,
                UserId = this.Id.Value
            };

            this.listUserGroup.Add(newUserGroup);
            this.listNewUserGroup.Add(newUserGroup);
            StateHasChanged();
        }
        return;

    }

    private void UpdateEachUserGroupNoCheckValid(ChangeEventArgs e, string param, UserGroup userGroup)
    {
        if (param.Equals("GroupName", StringComparison.OrdinalIgnoreCase))
        {
            userGroup.GroupName = e.Value?.ToString() ?? "";
            UserGroupService.UpdateUserGroup(userGroup.UserGroupId, userGroup);
            StateHasChanged();
        }
        else if (param.Equals("RoleName", StringComparison.OrdinalIgnoreCase))
        {
            userGroup.RoleName = e.Value?.ToString() ?? "";
            UserGroupService.UpdateUserGroup(userGroup.UserGroupId, userGroup);
            StateHasChanged();
        }
        else if (param.Equals("StoreId", StringComparison.OrdinalIgnoreCase))
        {
            if (int.TryParse(e.Value?.ToString(), out int storeId))
            {
                userGroup.StoreId = storeId;
            }
            UserGroupService.UpdateUserGroup(userGroup.UserGroupId, userGroup);
            StateHasChanged();
        }
        return;
    }



    // private void UpdateEachUserGroupNoCheckValid(UserGroup userGroup)
    // {
    //         UserGroupService.UpdateUserGroup(userGroup.UserGroupId, userGroup);
    //         StateHasChanged();
    // }


    // private void TestOnChange(ChangeEventArgs e)
    // {
    //     Console.WriteLine($"Phu Test {e.Value}");
    // }
}
