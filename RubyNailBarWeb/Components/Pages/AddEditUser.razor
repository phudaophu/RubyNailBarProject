@page "/user/{id:int?}"

@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IUsersService UsersService
@inject IStoresService StoresService
@inject IUserGroupService UserGroupService

@inject FileUploadService FileUploadService
@inject ContainerStorage ContainerStorage
@inject IJSRuntime JSRuntime


@if (Id.HasValue)
{
    <h3>Edit User</h3>
}
else
{
    <h3>Add User</h3>
}

@if(user is not null)
{
    <EditForm Model="user" FormName="userForm" OnValidSubmit="SubmitFunc">
        <DataAnnotationsValidator></DataAnnotationsValidator>

        <div class="container">
            <form class="form-horizontal">
                <div class="row">
                    <div class="col-sm-12 col-sm-offset-1">
                        <div class="row row-centered">
                            <div class="col-xs-12 col-sm-6 col-centered">

                                <FieldComponent Label="User Id">

                                    <Control>
                                        <InputNumber @bind-Value="user.UserId" disabled></InputNumber>
                                    </Control>

                                </FieldComponent>

                                <FieldComponent Label="First Name">
                                    <Control>
                                        <InputText @bind-Value="user.FirstName"></InputText>
                                    </Control>
                                    <ValidationControl>
                                        <ValidationMessage For="() => user.FirstName"></ValidationMessage>
                                    </ValidationControl>
                                </FieldComponent>

                                <FieldComponent Label="Last Name">
                                    <Control>
                                        <InputText @bind-Value="user.LastName"></InputText>
                                    </Control>

                                </FieldComponent>

                                <FieldComponent Label="Email">
                                    <Control>
                                        <InputText type="email" @bind-Value="user.Email"></InputText>
                                    </Control>
                                </FieldComponent>

                                <FieldComponent Label="Phone Number">
                                    <Control>
                                        <InputText type="tel" @bind-Value="user.PhoneNo"></InputText>
                                    </Control>
                                </FieldComponent>
                               


                            </div>

                            <div class="col-xs-12 col-sm-6 col-centered">

                                <FieldComponent Label="Upload Avatar">
                                    <Control>
                                        <div class="d-flex align-items-center gap-3">

                                                @if (!string.IsNullOrEmpty(user.ImageUrl))
                                                {
                                                    <img src="@user.ImageUrl" style="width: 30px; height:30px" />
                                                }
                                                else
                                                {
                                                    <img src=@(FileUploadService.GetUserAvatarDefaultImage()) style="width: 30px; height:30px" />
                                                }

                                                <InputFile OnChange="@(e => HandleImageUpload(e, user))" disabled="@(!Id.HasValue)"/>
                                        </div>

                                    </Control>
                                    <ValidationControl>
                                        @if (!string.IsNullOrEmpty(uploadImageError))
                                        {
                                            <div class="validation-message">@uploadImageError</div>
                                        }
                                    </ValidationControl>
                                </FieldComponent>


                                <FieldComponent Label="User Name">
                                    <Control>
                                        <div class="d-flex align-items-center gap-3">
                                            <InputText @bind-Value="user.Username" disabled="@(isEditUserName == false)" class="@(isDuplicatedUsername == true ? "border-danger" : "")" @onblur="ClearUsernameError"></InputText>
                                            <button type="button" class="btn btn-sm @(isEditUserName ? "btn-outline-secondary" : "btn-outline-warning")" @onclick="EditUsernameButton" title="Click to modify username"> @(isEditUserName ? "🔓" : "🔒")</button>
                                        </div>
                                    </Control>
                                    <ValidationControl>
                                        <ValidationMessage For="() => user.Username"></ValidationMessage>
                                        @if (isDuplicatedUsername)
                                        {
                                            <div class="validation-message">@usernameDuplicatedError</div>
                                        }
                                    </ValidationControl>
                                </FieldComponent>

                                <FieldComponent Label="Address">
                                    <Control>
                                        <InputText  @bind-Value="user.Address1"></InputText>
                                    </Control>
                                </FieldComponent>

                                <FieldComponent Label="Password">
                                    <Control>
                                        <div class="d-flex align-items-center gap-3">
                                            <InputText type="@(isShowedPassword==true?"text":"password")" @bind-Value="user.PasswordHash"></InputText>
                                            <button type="button" class="btn btn-sm @(isShowedPassword ? "btn-outline-secondary" : "btn-outline-warning")" @onclick="ShowingPasswordButton" title="Click to unhide password"> @(isShowedPassword ? "🔓" : "🔒")</button>
                                        </div>
                                    </Control>
                                    <ValidationControl>
                                        <ValidationMessage For="() => user.PasswordHash"></ValidationMessage>
                                    </ValidationControl>
                                </FieldComponent>

                                @if (Id.HasValue)
                                {
                                    <FieldComponent Label="Modified Date">
                                        <Control>
                                            <input type="datetime"
                                                   class="form-control"
                                                   @bind="user.ModifiedDatetime"
                                                   disabled>
                                        </Control>
                                    </FieldComponent>
                                }


                                <FieldComponent Label="Is Active">
                                    <Control>
                                        <InputCheckbox @bind-Value="user.IsActive"></InputCheckbox>
                                    </Control>
                                </FieldComponent>



                            </div>

                        </div>
                    </div>
                </div>
            </form>

        </div>

        <a class="btn btn-primary" href="/users"> Back </a>
        &nbsp;
        <button class="btn btn-primary" type="submit">Update</button>
        &nbsp;
        @if (user.UserId > 0)
        {
            <a class="btn btn-primary" href=@($"/usergroups/{user.UserId}")> Edit Group </a>
        }

    </EditForm>
}


@code {


    [Parameter]
    public int? Id { get; set; }

    [SupplyParameterFromForm]
    private User? user { get; set; }

    private bool isEditUserName = false;

    private bool isShowedPassword = false;

    private bool isDuplicatedUsername = false;
    private string? usernameDuplicatedError = null;
    private string? uploadImageError = null;

    private List<Store> listStore = new List<Store>();


    protected override void OnParametersSet()
    {
        if (this.Id.HasValue)
        {
            user ??= UsersService.GetUserByIdService(this.Id.Value);
            isEditUserName = false;
        }
        else
        {
            user ??= new User() { IsActive = true };
            isEditUserName = true;
            listStore = StoresService.GetStoresService().Where(x => x.IsActive == true).ToList();    
        }
    }

    private async Task  HandleImageUpload(InputFileChangeEventArgs e, User user)
    {
        var file = e.File;

        if (file == null || user.UserId <= 0)
        {
            uploadImageError = "File is null or UserId is not set.";
            throw new InvalidOperationException("File is null or UserId is not set.");
        }

        string subFolderName = $"user\\{user.Username}-{user.UserId}";

        string fileNameWithoutExtension = $"user-avatar-{user.Username}";

        string imageUrl = string.Empty;

        try
        {
            imageUrl = await FileUploadService.SaveImageAsync(file, subFolderName, fileNameWithoutExtension);

        }
        catch (Exception ex)
        {
            uploadImageError = ex.Message;  
        }

        if(!string.IsNullOrEmpty(imageUrl))
        {
            if(!string.IsNullOrEmpty(user.ImageUrl))
            {
                try
                {
                    FileUploadService.DeleteFileByPathAsync(user.ImageUrl); 

                }
                catch (Exception ex)
                {
                    uploadImageError = ex.Message;
                }
            }
            user.ImageUrl = imageUrl;
            StateHasChanged();
        }
        else
        {
            uploadImageError = "Image upload failed.";
            throw new InvalidOperationException("Image upload failed.");
        }
    }

    private void ShowingPasswordButton()
    {
        isShowedPassword = !isShowedPassword; // Toggle the visibility of the password
    }   

    private async Task EditUsernameButton()
    {
        if (Id.HasValue && isEditUserName == false)
        {
            var isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", "🚧🚧🚧🚧🚧🚧\n👉🏼  Are you want to edit username? \n⚠️  That may cause some problems related to file-uploading ⚠️\n🚨   Proceed to edit, click OK ");
            if (isConfirmed == true) 
            {
                isEditUserName = true;
            }
            else
            {
                isEditUserName = false; 
            }

        }
        else
        {
            isEditUserName = !isEditUserName; // Toggle the edit mode
        }

    }

    private void ClearUsernameError(FocusEventArgs e)
    {
        isDuplicatedUsername = false;
        usernameDuplicatedError = null;
    }

    private void SubmitFunc()
    {

        if (user is not null && user.Username is not null)
        {
            isDuplicatedUsername = UsersService.IsUsernameExistsService(user.Username, Id);
            if (isDuplicatedUsername)
            {
                usernameDuplicatedError = "The Username is already taken.";
                return; // stop submission
            }
            else
            {
                usernameDuplicatedError = null;
            }

            

            if (this.Id.HasValue)   
            {
                UsersService.UpdateUserService(user.UserId, user);
                NavigationManager.NavigateTo("/users");
            }
            else
            {
                user.ModifiedDatetime = DateTime.Now;
                //user.IsActive = true;
                int newUserId =  UsersService.AddUserService(user);
                UserGroupService.AddUserGroup(new UserGroup()
                {
                    StoreId = listStore.FirstOrDefault()?.StoreId ?? 0,
                    UserId = newUserId,
                   
                });
                NavigationManager.NavigateTo($"/usergroups/{newUserId}");
            }

        }
       
    }


}
