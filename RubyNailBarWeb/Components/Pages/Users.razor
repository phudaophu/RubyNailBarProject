@page "/users"

@inject ContainerStorage ContainerStorage
@inject IStoresService StoresService
@inject IUsersService UsersService
@rendermode InteractiveServer
@inject NavigationManager NavigationManager


<h3>Users</h3>

<SearchBarComponent SearchBarInfo="@searchLabel" SearchUsersCallBack="HandleSearchUser" OnClearSearchBarCallBack="HandleClearSearchBar" @ref="searchBarComponent">
    <SelectControl>
        <InputSelect @bind-Value="selectedStoreId" class="@(selectedStoreId == 0? "text-secondary":"text-danger border-danger")">

            <option value="0">-- All Stores --</option>

            @foreach (var store in listStore)
            {
                <option value="@store.StoreId" class="text-dark">@store.Name</option>
            }

        </InputSelect>
    </SelectControl>
    <ElementControl>
        <a class="btn btn-outline-secondary" href="/user"> Add User </a>
    </ElementControl>
</SearchBarComponent>


<UserListComponent FilteredUsersData="@filteredUsers" PageSize="@pageSize" CurrentPage="@currentPage" TotalPagesCallBack="HandleTotalPage" OnSortingCallBack="HandleSorting" SelectedStoreFilter="@selectedStoreId" @ref="userListComponent"></UserListComponent>

<PaginationComponent TotalPages="@totalPages" PageSizeCallBack="HandlePageSize" CurrentPageCallBack="HandleCurrentPage" @ref = "paginationComponent"></PaginationComponent>


@code {

    private int selectedStoreId = 0;

    private List<Store> listStore = new List<Store>();

    private string searchLabel = "Enter Users Info";    

    private int totalPages;

    private int pageSize;

    private int currentPage;

    // private List<User> listUsers = new List<User>();    

    private string? filteredUsers = string.Empty;

    private SearchBarComponent? searchBarComponent;

    private UserListComponent? userListComponent;

    private PaginationComponent? paginationComponent;

    private IDisposable? _locationChangingHandler;

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            listStore = StoresService.GetStores().Where(s => s.IsActive == true).ToList();
        }
    }

    public void HandleClearSearchBar()
    {
        filteredUsers = string.Empty; 
        selectedStoreId = 0;
        userListComponent?.ClearSorting();
    }

    public void HandleSorting()
    {
        paginationComponent?.setCurrentPage(1);
    }

    public void HandleSearchUser(string userFilterData)
    {

        currentPage = 1;
        ContainerStorage.setCurrentPage(1);
        filteredUsers = userFilterData;
    }

    private void HandleTotalPage(int totalPages)
    {
        this.totalPages = totalPages;
    }

    private void HandlePageSize(int pageSize)
    {
        this.pageSize = pageSize;
        searchBarComponent?.ClearSearchBar();
        userListComponent?.ClearSorting();
    }

    private void HandleCurrentPage(int currentPage)
    {
        this.currentPage = currentPage;

    }
}
