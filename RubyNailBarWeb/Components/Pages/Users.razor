@page "/users"

@inject ContainerStorage ContainerStorage
@inject IStoresService StoresService
@inject IUsersService UsersService
@rendermode InteractiveServer
@inject NavigationManager NavigationManager


<h3>Users</h3>

<SearchBarComponent CurrentPath="@currentPath" SearchBarInfo="@searchLabel" SearchUsersCallBack="HandleSearchUser" OnClearSearchBarCallBack="HandleClearSearchBar" @ref="searchBarComponent">
    <SelectControl>
        <InputSelect @bind-Value="selectedStoreId" class="@(selectedStoreId == 0? "text-secondary":"text-danger border-danger")">

            <option value="0">-- All Stores --</option>

            @foreach (var store in listStore)
            {
                <option value="@store.StoreId" class="text-dark">@store.Name</option>
            }

        </InputSelect>
    </SelectControl>
    <ElementControl>
        <a class="btn btn-outline-secondary" href="/user"> Add User </a>
    </ElementControl>
</SearchBarComponent>


<UserListComponent CurrentPath="@currentPath" SearchingUsersData="@searchedUsers" PageSize="@pageSize" CurrentPage="@currentPage" TotalPagesCallBack="HandleTotalPage" OnSortingCallBack="HandleSorting" SelectedStoreIdFilter="@selectedStoreId" @ref="userListComponent"></UserListComponent>

<PaginationComponent CurrentPath="@currentPath" TotalPages="@totalPages" PageSizeCallBack="HandlePageSize" CurrentPageCallBack="HandleCurrentPage" @ref = "paginationComponent"></PaginationComponent>


@code {
    private string currentPath = string.Empty;

    private int _selectedStoreId = 0;

    private int selectedStoreId 
    { 
        get => _selectedStoreId;
        set
        {
            if(value != _selectedStoreId)
            {
                _selectedStoreId = value;
                userListComponent?.ClearSorting();
                ContainerStorage.SetOptionalData(currentPath, "SelectedStoreId", _selectedStoreId);

            }
        }
    }

    private List<Store> listStore = new List<Store>();

    private string searchLabel = "Enter Users Info";    

    private int totalPages;

    private int pageSize;

    private int currentPage;

    // private List<User> listUsers = new List<User>();    

    private string? searchedUsers = string.Empty;

    private SearchBarComponent? searchBarComponent;

    private UserListComponent? userListComponent;

    private PaginationComponent? paginationComponent;

   // private IDisposable? _locationChangingHandler;

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            currentPath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri).Split('?', '#')[0];
            ContainerStorage.ResetPaginationData(currentPath);

            listStore = StoresService.GetStoresService().Where(s => s.IsActive == true).ToList();
            if (ContainerStorage.GetOptionalData(currentPath).Count > 0 && ContainerStorage.GetOptionalData(currentPath).Keys.Contains("SelectedStoreId"))
            {
                _selectedStoreId = ContainerStorage.GetOptionalData(currentPath)["SelectedStoreId"];
            }
            StateHasChanged();
        }
    }

    public void HandleClearSearchBar()
    {
        searchedUsers = string.Empty;
        //selectedStoreId = 0;

        ContainerStorage.SetSearchedText(currentPath, string.Empty);
        //ContainerStorage.SetSelectedRecordId(0);
        ContainerStorage.SetOptionalData(currentPath, "SelectedStoreId", 0);

        userListComponent?.ClearSorting();
    }

    public void HandleSorting()
    {
        paginationComponent?.SetCurrentPage(1);
        ContainerStorage.SetSelectedRecordId(currentPath, 0);
    }

    public void HandleSearchUser(string searchingUserData)
    {
        currentPage = 1;
        ContainerStorage.SetCurrentPage(currentPath, 1);
        ContainerStorage.SetSelectedRecordId(currentPath,0);
        searchedUsers = searchingUserData;
        ContainerStorage.SetSearchedText(currentPath, searchingUserData);
    }

    private void HandleTotalPage(int totalPages)
    {
        this.totalPages = totalPages;
    }

    private void HandlePageSize(int pageSize)
    {
        this.pageSize = pageSize;
        //ContainerStorage.SetOptionalData("selectedFilteredValueA", 0);
        searchBarComponent?.ClearSearchBar();
        userListComponent?.ClearSorting();
    }

    private void HandleCurrentPage(int currentPage)
    {
        this.currentPage = currentPage;

    }



}
