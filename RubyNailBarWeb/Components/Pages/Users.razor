@page "/users"

@inject ContainerStorage ContainerStorage
@inject IUsersService UsersService
@rendermode InteractiveServer

<h3>User</h3>

<SearchBarComponent SearchUsersCallBack="HandleSearchUser" OnClearSearchBarCallBack="HandleClearSearchBar" @ref="searchBarComponent">
    <ElementControl>
        <a class="btn btn-outline-secondary" href="/user"> Add User </a>
    </ElementControl>
</SearchBarComponent>


<UserListComponent FilteredUsersData="@filteredUsers" PageSize="@pageSize" CurrentPage="@currentPage" TotalPagesCallBack="HandleTotalPage" OnSortingCallBack="HandleSorting" @ref="userListComponent"></UserListComponent>

<PaginationComponent TotalPages="@totalPages" PageSizeCallBack="HandlePageSize" CurrentPageCallBack="HandleCurrentPage" @ref = "paginationComponent"></PaginationComponent>


@code {

    private int totalPages;

    private int pageSize;

    private int currentPage;

    private List<User> listUsers = new List<User>();    

    private string? filteredUsers = "";

    private SearchBarComponent? searchBarComponent;

    private UserListComponent? userListComponent;

    // new addition
    private PaginationComponent? paginationComponent;
    //private UserListComponent? userListComponent;

    // private void OnSortingHandle()
    // {
    //     paginationComponent?.getPaginationFromContainer();
    // }
    // new addition
    public void HandleClearSearchBar()
    {
        userListComponent?.ClearSorting();
    }

    public void HandleSorting()
    {
        paginationComponent?.setCurrentPage(1);
    }

    public void HandleSearchUser(string userFilterData)
    {
        filteredUsers = userFilterData;
    }

    private void HandleTotalPage(int totalPages)
    {
        this.totalPages = totalPages;
        //StateHasChanged();
    }

    private void HandlePageSize(int pageSize)
    {
        this.pageSize = pageSize;

        searchBarComponent?.ClearSearchBar();
        userListComponent?.ClearSorting();
        //StateHasChanged();
    }

    private void HandleCurrentPage(int currentPage)
    {
        this.currentPage = currentPage;
        //StateHasChanged();
    }
}
