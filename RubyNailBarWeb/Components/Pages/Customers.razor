@page "/customers"


@inject ContainerStorage ContainerStorage
@rendermode InteractiveServer
<h3>Customers</h3>


<SearchBarComponent SearchBarInfo="@searchLabel" SearchUsersCallBack="HandleSearchCustomer" OnClearSearchBarCallBack="HandleClearSearchBar" @ref="searchBarComponent">
    <SelectControl>

    </SelectControl>
    <ElementControl>
        <a class="btn btn-outline-secondary" href="/customer"> Add Customer </a>
    </ElementControl>
</SearchBarComponent>


<CustomerListComponent FilteredCustomersData="@filteredCustomers" PageSize="@pageSize" CurrentPage="@currentPage" TotalPagesCallBack="HandleTotalPage" OnSortingCallBack="HandleSorting" @ref="customerListComponent"></CustomerListComponent>



<PaginationComponent TotalPages="@totalPages" PageSizeCallBack="HandlePageSize" CurrentPageCallBack="HandleCurrentPage" @ref = "paginationComponent"></PaginationComponent>


@code {

    private string searchLabel = "Enter Customers Info";    

    private int totalPages;

    private int pageSize;

    private int currentPage;

    private string? filteredCustomers = "";

    private SearchBarComponent? searchBarComponent;

    private PaginationComponent? paginationComponent;

    private CustomerListComponent? customerListComponent;


    private void HandleTotalPage(int totalPages)
    {
        this.totalPages = totalPages;
    }

    private void HandlePageSize(int pageSize)
    {
        this.pageSize = pageSize;
        searchBarComponent?.ClearSearchBar();
        customerListComponent?.ClearSorting();  

    }

    private void HandleCurrentPage(int currentPage)
    {
        this.currentPage = currentPage;
    }



    public void HandleClearSearchBar()
    {
        customerListComponent?.ClearSorting();
    }

    public void HandleSorting()
    {
        paginationComponent?.setCurrentPage(1);
    }

    public void HandleSearchCustomer(string customerFilterData)
    {
        filteredCustomers = customerFilterData;
    }


}
